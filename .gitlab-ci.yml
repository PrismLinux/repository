image: archlinux:latest

variables:
  REPO_NAME: "crystallinux"
  PACKAGE_PROJECT_IDS: "70724583"

pages:
  stage: deploy
  script:
    - |
      # --- Step 1: Setup Environment ---
      set -eo pipefail # Exit immediately if a command exits with a non-zero status
      echo "Updating system and installing dependencies..."
      # pacman-contrib contains the repo-add utility
      pacman -Syu --noconfirm --needed curl jq pacman-contrib

      # --- Step 2: Prepare Directories ---
      REPO_DIR="public/x86_64"
      echo "Creating repository directory: $REPO_DIR"
      mkdir -p "$REPO_DIR"

      # --- Step 3: Download Packages from GitLab Releases ---
      echo "Finding and downloading packages..."
      declare -a DOWNLOADED_PACKAGES
      for project_id in $PACKAGE_PROJECT_IDS; do
        echo "Processing project ID: $project_id"
        
        RELEASE_API_URL="https://gitlab.com/api/v4/projects/${project_id}/releases/latest"
        API_RESPONSE=$(curl --silent --fail --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$RELEASE_API_URL")

        if [ -z "$API_RESPONSE" ]; then
          echo "WARNING: No releases found for project $project_id. Skipping."
          continue
        fi

        # Find all .pkg.tar.zst files in the release
        echo "$API_RESPONSE" | jq -r '
          .assets.links[]?
          | select(.name | endswith(".pkg.tar.zst"))
          | "\(.name)|\(.url)"
        ' | while IFS='|' read -r PACKAGE_NAME PACKAGE_URL; do
          if [ -z "$PACKAGE_NAME" ]; then continue; fi
          
          echo "Downloading package: $PACKAGE_NAME"
          # -L to follow GitLab redirects
          curl --silent --fail -L -o "$REPO_DIR/$PACKAGE_NAME" "$PACKAGE_URL"
          DOWNLOADED_PACKAGES+=("$REPO_DIR/$PACKAGE_NAME")
        done
      done

      # --- Step 4: Create Repository Database ---
      if [ ${#DOWNLOADED_PACKAGES[@]} -eq 0 ]; then
        echo "No packages found to add to the repository."
        # Create an empty repository database
        touch "$REPO_DIR/${REPO_NAME}.db.tar.gz"
      else
        echo "Creating repository database..."
        # Remove old symlinks to avoid errors
        rm -f "$REPO_DIR/${REPO_NAME}.db" "$REPO_DIR/${REPO_NAME}.files"
        
        # Create the database. repo-add will automatically create .db.tar.gz and .files.tar.gz
        repo-add "$REPO_DIR/${REPO_NAME}.db.tar.gz" "${DOWNLOADED_PACKAGES[@]}"
        echo "Repository database created successfully."
      fi

      # --- Step 5: Generate HTML Page ---
      echo "Generating public/index.html..."
      # GitLab Pages URL will look like https://<group-or-user>.gitlab.io/<project-name>
      # CI_PAGES_URL is provided by GitLab
      REPO_URL="${CI_PAGES_URL}/x86_64"

      cat <<EOF > public/index.html
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <title>${REPO_NAME^} Package Repository</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; margin: 40px; background: #f8f9fa; color: #212529; }
          h1, h2 { color: #0056b3; border-bottom: 2px solid #dee2e6; padding-bottom: 10px; }
          .container { max-width: 800px; margin: auto; }
          code { background: #e9ecef; padding: 5px 8px; border-radius: 5px; font-family: "SF Mono", "Fira Code", monospace; display: block; white-space: pre; }
          .repo-section { margin-top: 20px; padding: 20px; border: 1px solid #dee2e6; border-radius: 8px; background: #fff; }
        </style>
      </head>
      <body>
      <div class="container">
        <h1>${REPO_NAME^} Package Repository</h1>
        <p>This is a full-featured package repository for Arch Linux.</p>

        <div class="repo-section">
          <h2>How to Use This Repository</h2>
          <p>Add the following lines to the end of your <code>/etc/pacman.conf</code> file:</p>
          <code>[${REPO_NAME}]
        SigLevel = Optional TrustAll
        Server = ${REPO_URL}</code>
          <p>Then, refresh your package databases with:</p>
          <code>sudo pacman -Syyu</code>
        </div>

        <div class="repo-section">
          <h2>Packages in This Repository</h2>
          <ul>
      EOF

      # List packages
      if [ ${#DOWNLOADED_PACKAGES[@]} -eq 0 ]; then
        echo "        <li>No packages available at the moment.</li>" >> public/index.html
      else
        for pkg in "$REPO_DIR"/*.pkg.tar.zst; do
          if [ -f "$pkg" ]; then
            pkg_name=$(basename "$pkg")
            echo "        <li>${pkg_name}</li>" >> public/index.html
          fi
        done
      fi

      cat >> public/index.html << 'EOF'
          </ul>
        </div>
      </div>
      </body>
      </html>
      EOF
      echo "Repository setup complete."

  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'