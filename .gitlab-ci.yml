image: archlinux:latest

variables:
  REPO_NAME: "crystallinux"
  PACKAGE_PROJECT_IDS: "70724583"

pages:
  stage: deploy

  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm curl jq base-devel

  script:
    - mkdir -p public/x86_64
    - echo "Created directory structure at public/x86_64"

    # Initialize package info file
    - echo "" > /tmp/packages_info.txt

    # --- Get Package Info from Releases ---
    - |
      for project_id in $PACKAGE_PROJECT_IDS; do
        echo "Processing project ID: $project_id"
        
        PROJECT_API_URL="https://gitlab.com/api/v4/projects/${project_id}"
        PROJECT_INFO=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$PROJECT_API_URL")
        PROJECT_NAME=$(echo "$PROJECT_INFO" | jq -r '.path')
        echo "Project name: $PROJECT_NAME"
        
        RELEASE_API_URL="https://gitlab.com/api/v4/projects/${project_id}/releases/latest"
        API_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$RELEASE_API_URL")

        if [ -z "$API_RESPONSE" ]; then
          echo "WARNING: No releases found for project $project_id. Skipping."
          continue
        fi

        ASSET_INFO=$(echo "$API_RESPONSE" | jq -r '(.assets.links // [])[] | select(.name | endswith(".pkg.tar.zst")) | "\(.name)|\(.url)"' | head -n 1)

        if [ -z "$ASSET_INFO" ]; then
          echo "WARNING: No '*.pkg.tar.zst' asset found in the latest release of project $project_id. Skipping."
          continue
        fi

        PACKAGE_NAME=$(echo "$ASSET_INFO" | cut -d'|' -f1)
        PACKAGE_URL=$(echo "$ASSET_INFO" | cut -d'|' -f2)
        PACKAGE_SIZE=$(curl --silent --head "$PACKAGE_URL" | grep -i content-length | awk '{print $2}' | tr -d '\r' || echo "Unknown")
        
        echo "Found package: $PACKAGE_NAME"
        echo "Direct URL: $PACKAGE_URL"
        echo "Size: $PACKAGE_SIZE bytes"
        
        echo "${PACKAGE_NAME}|${PACKAGE_URL}|${PACKAGE_SIZE}" >> /tmp/packages_info.txt
      done

    # --- Create Repository Database with Direct Links ---
    - cd public/x86_64
    - |
      if [ ! -s /tmp/packages_info.txt ]; then
        echo "No packages found to add to the repository."
        touch "${REPO_NAME}.db"
        touch "${REPO_NAME}.files"
      else
        echo "Creating repository database with direct links..."
        echo "# This is a redirect-based repository" > "${REPO_NAME}.db"
        echo "# Packages are served directly from GitLab artifacts" >> "${REPO_NAME}.db"
        echo "# This is a redirect-based repository" > "${REPO_NAME}.files"
        echo "# Files are served directly from GitLab artifacts" >> "${REPO_NAME}.files"
        
        while IFS='|' read -r PACKAGE_NAME PACKAGE_URL PACKAGE_SIZE; do
          if [ -n "$PACKAGE_NAME" ]; then
            echo "REDIRECT_URL=${PACKAGE_URL}" > "${PACKAGE_NAME}.redirect"
          fi
        done < /tmp/packages_info.txt
      fi
    - cd ../..

    # --- Generate HTML Index with Direct Links ---
    - echo "Generating index.html files with direct links..."
    - |
      cat > public/index.html << 'EOF'
      <!DOCTYPE html>
      <html><head>
        <title>CrystalLinux Packages Repository</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; }
          .package { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }
          .download-btn { background: #007cba; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }
          .size { color: #666; font-size: 0.9em; }
        </style>
      </head><body>
      <h1>CrystalLinux Packages Repository</h1>
      <p>This repository uses direct links to GitLab artifacts.</p>
      <h2>Architecture: x86_64</h2>
      EOF
    
    - |
      if [ -s /tmp/packages_info.txt ]; then
        while IFS='|' read -r PACKAGE_NAME PACKAGE_URL PACKAGE_SIZE; do
          if [ -n "$PACKAGE_NAME" ]; then
            if [ "$PACKAGE_SIZE" != "Unknown" ] && [ "$PACKAGE_SIZE" -gt 1048576 ] 2>/dev/null; then
              SIZE_DISPLAY="$(( PACKAGE_SIZE / 1048576 )) MB"
            elif [ "$PACKAGE_SIZE" != "Unknown" ] && [ "$PACKAGE_SIZE" -gt 1024 ] 2>/dev/null; then
              SIZE_DISPLAY="$(( PACKAGE_SIZE / 1024 )) KB"
            elif [ "$PACKAGE_SIZE" != "Unknown" ]; then
              SIZE_DISPLAY="${PACKAGE_SIZE} bytes"
            else
              SIZE_DISPLAY="Unknown size"
            fi
            
            cat >> public/index.html << EOF
        <div class="package">
          <h3>${PACKAGE_NAME}</h3>
          <p class="size">Size: ${SIZE_DISPLAY}</p>
          <a href="${PACKAGE_URL}" class="download-btn" download="${PACKAGE_NAME}">Download Package</a>
          <a href="${PACKAGE_URL}" target="_blank" style="margin-left: 10px;">Direct Link</a>
        </div>
      EOF
          fi
        done < /tmp/packages_info.txt
      else
        echo "      <p>No packages available yet.</p>" >> public/index.html
      fi
    
    - |
      cat >> public/index.html << 'EOF'
      
      <h2>Usage Instructions</h2>
      <p>This repository uses direct links to packages. You can:</p>
      <ol>
        <li>Download packages directly using the links above</li>
        <li>Use the direct URLs in your package manager if it supports URL-based repositories</li>
      </ol>
      
      <h3>Repository Configuration</h3>
      <p>For traditional package managers, you may need to configure custom mirror URLs pointing to the individual package links.</p>
      
      </body></html>
      EOF

    # Create a simple x86_64 redirect page
    - |
      cat > public/x86_64/index.html << 'EOF'
      <!DOCTYPE html>
      <html><head>
        <meta http-equiv="refresh" content="0; url=../index.html">
        <title>Redirecting...</title>
      </head><body>
        <p>Redirecting to main page... <a href="../index.html">Click here if not redirected</a></p>
      </body></html>
      EOF

    - echo "Repository setup complete with direct links."

  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'