# Copyright (C) 2025 CrystalNetwork Studio
#
# This file is part of the CrystalNetwork Studio, PrismLinux Repository.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

image: ghcr.io/crystalnetwork-studio/archlinux-builder:latest

variables:
  REPO_NAME: "prismlinux"
  GIT_STRATEGY: clone
  GIT_DEPTH: 0

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'push'
    - if: ($CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'merge_request_event')
      changes:
        - .gitlab-ci.yml
        - packages_config.yaml

stages:
  - deploy

cache:
  key: "repo-cache-${CI_COMMIT_REF_SLUG}"
  paths:
    - "x86_64/"
    - "testing/x86_64/"
    - "api/"
  policy: pull-push

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    - mkdir -p x86_64 api testing/x86_64
    - git config --global --add safe.directory '*'
    - git config --global user.name "GitLab CI/Package Manager"
    - git config --global user.email "CI@prismlinux.org"
    - git config --global init.defaultBranch $CI_DEFAULT_BRANCH
    - |
      if [ -n "$GITLAB_API_TOKEN" ]; then
        echo "Configuring git with Personal Access Token..."
        git remote set-url origin "https://oauth2:${GITLAB_API_TOKEN}@${CI_SERVER_HOST#https://}/${CI_PROJECT_PATH}.git"
        echo "Git remote URL configured successfully"
      else
        echo "ERROR: GITLAB_API_TOKEN not found! Please add it to CI/CD variables."
        exit 1
      fi

  script: |
    set -eo pipefail

    # Handle detached HEAD state by creating or switching to the default branch
    echo "Ensuring we're on the $CI_DEFAULT_BRANCH branch..."
    if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
      echo "Detached HEAD state detected, creating branch $CI_DEFAULT_BRANCH"
      git checkout -b $CI_DEFAULT_BRANCH
    elif [ "$(git rev-parse --abbrev-ref HEAD)" != "$CI_DEFAULT_BRANCH" ]; then
      echo "Switching to $CI_DEFAULT_BRANCH branch"
      git checkout $CI_DEFAULT_BRANCH
    fi

    echo "Running package manager for Stable Repository..."
    if [ -n "$GITLAB_API_TOKEN" ]; then
      pkgbuild-manager --gitlab-token="$GITLAB_API_TOKEN" --verbose
    else
      echo "ERROR: No GitLab token available!"
      exit 1
    fi

    echo "Committing changes to repository..."

    echo "Running package manager for Testing Repository..."
    if [ -n "$GITLAB_API_TOKEN" ]; then
      pkgbuild-manager --gitlab-token="$GITLAB_API_TOKEN" --testing --verbose
    else
      echo "ERROR: No GitLab token available!"
      exit 1
    fi

    echo "Committing changes to repository..."

    # Add only directories that exist
    if [ -d "x86_64" ]; then
      git add x86_64/
    fi

    if [ -d "testing" ]; then
      git add testing/
    fi

    if [ -d "api" ]; then
      git add api/
    fi

    if ! git diff --cached --quiet; then
      git commit -m "Automated package repository update [ci skip]"
      git push origin $CI_DEFAULT_BRANCH
    else
      echo "No changes to commit"
    fi

    echo "Creating pages directory structure..."
    # Clean public directory first to avoid permission issues
    rm -rf public
    mkdir -p public
    if [ -d "x86_64" ]; then
      cp -r x86_64 public/
    fi
    if [ -d "testing" ]; then
      cp -r testing public/
    else
      echo "No testing repository to copy"
    fi
    if [ -d "api" ]; then
      cp -r api public/
    fi

  artifacts:
    paths:
      - public
    expire_in: 1 hour

clean-stable:
  stage: deploy
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    - sudo pacman -Sy --noconfirm git
    - git config --global --add safe.directory '*'
    - git config --global user.name "GitLab CI/Cleanup"
    - git config --global user.email "ci-cleanup@prismlinux.org"
    - |
      if [ -n "$GITLAB_API_TOKEN" ]; then
        git remote set-url origin "https://oauth2:${GITLAB_API_TOKEN}@${CI_SERVER_HOST#https://}/${CI_PROJECT_PATH}.git"
      else
        echo "ERROR: GITLAB_API_TOKEN not found!"
        exit 1
      fi

  script:
    - echo "⚠️  CLEANUP MODE - This will remove all STABLE packages!"
    - echo "Running cleanup for stable repository..."
    - pkgbuild-manager clean --verbose --gitlab-token="$GITLAB_API_TOKEN"

    - echo "Ensuring we're on the $CI_DEFAULT_BRANCH branch..."
    - |
      if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
        echo "Detached HEAD state detected, creating branch $CI_DEFAULT_BRANCH";
        git checkout -b $CI_DEFAULT_BRANCH;
      elif [ "$(git rev-parse --abbrev-ref HEAD)" != "$CI_DEFAULT_BRANCH" ]; then
        echo "Switching to $CI_DEFAULT_BRANCH branch";
        git checkout $CI_DEFAULT_BRANCH;
      fi

    - echo "Committing changes to repository..."
    - if [ -d "x86_64" ]; then
      git add x86_64/;
      fi
    - if [ -d "api" ]; then
      git add api/;
      fi
    - |
      if git diff --cached --quiet; then
        echo "No changes to commit";
      else
        git commit -m "Cleanup: removed all stable packages [ci skip]";
        git push origin $CI_DEFAULT_BRANCH;
      fi
    - echo "Creating pages directory structure..."
    - rm -rf public
    - mkdir -p public
    - if [ -d "x86_64" ]; then
      cp -r x86_64 public/;
      fi
    - if [ -d "api" ]; then
      cp -r api public/;
      fi

  artifacts:
    paths:
      - public
    expire_in: 1 hour

clean-testing:
  stage: deploy
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    - git config --global --add safe.directory '*'
    - git config --global user.name "GitLab CI/Cleanup"
    - git config --global user.email "ci-cleanup@prismlinux.org"
    - |
      if [ -n "$GITLAB_API_TOKEN" ]; then
        git remote set-url origin "https://oauth2:${GITLAB_API_TOKEN}@${CI_SERVER_HOST#https://}/${CI_PROJECT_PATH}.git"
      else
        echo "ERROR: GITLAB_API_TOKEN not found!"
        exit 1
      fi

  script:
    - echo "⚠️  CLEANUP MODE - This will remove all TESTING packages!"
    - echo "Running cleanup for testing repository..."
    - pkgbuild-manager clean --testing --verbose --gitlab-token="$GITLAB_API_TOKEN"

    - echo "Ensuring we're on the $CI_DEFAULT_BRANCH branch..."
    - |
      if [ "$(git rev-parse --abbrev-ref HEAD)" = "HEAD" ]; then
        echo "Detached HEAD state detected, creating branch $CI_DEFAULT_BRANCH";
        git checkout -b $CI_DEFAULT_BRANCH;
      elif [ "$(git rev-parse --abbrev-ref HEAD)" != "$CI_DEFAULT_BRANCH" ]; then
        echo "Switching to $CI_DEFAULT_BRANCH branch";
        git checkout $CI_DEFAULT_BRANCH;
      fi

    - echo "Committing changes to repository..."
    - if [ -d "testing" ]; then
      git add testing/;
      fi
    - if [ -d "api" ]; then
      git add api/;
      fi
    - |
      if git diff --cached --quiet; then
        echo "No changes to commit";
      else
        git commit -m "Cleanup: removed all testing packages [ci skip]";
        git push origin $CI_DEFAULT_BRANCH;
      fi
    - echo "Creating pages directory structure..."
    - rm -rf public
    - mkdir -p public
    - if [ -d "testing" ]; then
      cp -r testing public/;
      fi
    - if [ -d "api" ]; then
      cp -r api public/;
      fi

  artifacts:
    paths:
      - public
    expire_in: 1 hour
