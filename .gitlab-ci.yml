image: archlinux:latest

variables:
  REPO_NAME: "crystallinux"
  PACKAGE_PROJECT_IDS: "70724583" 
  GITLAB_PAGES_URL: "https://crystalnetwork-studio.gitlab.io/linux/CrystalLinux/repository/main"

pages:
  stage: deploy

  # --- CACHING IMPLEMENTATION ---
  # This tells GitLab CI to save and restore the x86_64 directory between runs.
  cache:
    key: "${CI_COMMIT_REF_SLUG}-arch-repo" # A unique key for the cache, tied to the branch name
    paths:
      - public/x86_64/ # The directory to cache
    policy: pull-push # Restore the cache at the start (pull) and update it at the end (push)

  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm curl jq base-devel git

  script:
    # --- 1. Setup Repository Directory ---
    # The cache is restored before this script runs, but we use 'mkdir -p' to ensure
    # the directory exists on the very first run when the cache is empty.
    - mkdir -p public/x86_64
    - echo "Repository directory ensured at public/x86_64"
    - echo "Current repository contents (from cache):"
    - ls -l public/x86_64 || echo "Cache is empty."

    # --- 2. Fetch, Compare, and Download Packages ---
    # This variable will track if we need to rebuild the repository database.
    - REPO_UPDATED=false
    - |
      for project_id in $PACKAGE_PROJECT_IDS; do
        echo ""
        echo ">>> Processing project ID: $project_id"
        
        PIPELINES_API_URL="https://gitlab.com/api/v4/projects/${project_id}/pipelines?status=success&ref=main&per_page=1"
        PIPELINE_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$PIPELINES_API_URL")
        
        if [ -z "$PIPELINE_RESPONSE" ] || [ "$PIPELINE_RESPONSE" = "[]" ]; then
          echo "WARNING: No successful 'main' branch pipelines found for project $project_id. Skipping."
          continue
        fi
        
        PIPELINE_ID=$(echo "$PIPELINE_RESPONSE" | jq -r '.[0].id')
        JOBS_API_URL="https://gitlab.com/api/v4/projects/${project_id}/pipelines/${PIPELINE_ID}/jobs?scope[]=success"
        JOBS_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$JOBS_API_URL")
        JOB_WITH_ARTIFACTS=$(echo "$JOBS_RESPONSE" | jq -r '.[] | select(.artifacts_file != null) | .id' | head -n 1)
        
        if [ -z "$JOB_WITH_ARTIFACTS" ]; then
          echo "WARNING: No successful jobs with artifacts found for project $project_id. Skipping."
          continue
        fi
        
        echo "Found job $JOB_WITH_ARTIFACTS with artifacts to check."
        TEMP_DIR=$(mktemp -d)
        ARTIFACTS_ZIP="$TEMP_DIR/artifacts.zip"
        
        echo "Downloading artifacts to temporary location for inspection..."
        curl --location --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --output "$ARTIFACTS_ZIP" \
             "https://gitlab.com/api/v4/projects/${project_id}/jobs/${JOB_WITH_ARTIFACTS}/artifacts"
        
        if [ -f "$ARTIFACTS_ZIP" ] && [ -s "$ARTIFACTS_ZIP" ]; then
          unzip -q "$ARTIFACTS_ZIP" -d "$TEMP_DIR"
          
          # Now, loop through found packages and decide if they are new
          find "$TEMP_DIR" -name "*.pkg.tar.zst" -print0 | while IFS= read -r -d $'\0' remote_pkg_path; do
            REMOTE_PKG_FILENAME=$(basename "$remote_pkg_path")
            
            # --- CACHING LOGIC ---
            # Check if this exact package version already exists in our repository.
            if [ -f "public/x86_64/${REMOTE_PKG_FILENAME}" ]; then
              echo "Package ${REMOTE_PKG_FILENAME} is already the latest version. Skipping."
              continue # Move to the next package
            fi
            
            # If we are here, the package is new or updated.
            echo "New/updated package found: ${REMOTE_PKG_FILENAME}"
            REPO_UPDATED=true
            
            # Get the base name of the package (e.g., 'xmcl-launcher') to remove any old versions.
            # `pacman -Qp` is the most reliable way to get package info from a file.
            BASE_PKG_NAME=$(pacman -Qp "$remote_pkg_path" | awk '{print $1}')
            
            echo "Removing old versions of '${BASE_PKG_NAME}' from the repository..."
            # The find command will find files like 'xmcl-launcher-OLD-VERSION.pkg.tar.zst' and delete them.
            find public/x86_64/ -name "${BASE_PKG_NAME}-*.pkg.tar.zst" -delete
            
            echo "Adding new version to public/x86_64/"
            mv "$remote_pkg_path" "public/x86_64/"
          done
        else
            echo "WARNING: Failed to download artifacts for job $JOB_WITH_ARTIFACTS."
        fi
        
        rm -rf "$TEMP_DIR"
        echo "--- Finished processing project $project_id ---"
      done

    # --- 3. Create the Pacman Repository Database ---
    - cd public/x86_64
    - |
      if [ "$REPO_UPDATED" = true ]; then
        echo "Repository was updated. Rebuilding database..."
        repo-add ${REPO_NAME}.db.tar.gz *.pkg.tar.zst

        echo "Preparing database for static hosting..."
        rm -f ${REPO_NAME}.db ${REPO_NAME}.files
        cp ${REPO_NAME}.db.tar.gz ${REPO_NAME}.db
        cp ${REPO_NAME}.files.tar.gz ${REPO_NAME}.files
        echo "Repository database rebuilt successfully."
      else
        echo "No packages were updated. Using cached repository database."
      fi
    - cd ../..

    # --- 4. Generate a Human-Readable HTML Index Page
    - echo "Generating index.html..."
    - |
      cat > public/index.html << EOF
      <!DOCTYPE html>
      <html><head>
        <title>${REPO_NAME} Package Repository</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; margin: 40px; line-height: 1.6; color: #333; background-color: #fdfdfd; }
          .container { max-width: 800px; margin: 0 auto; }
          h1, h2 { color: #111; border-bottom: 1px solid #eee; padding-bottom: 10px; }
          pre { background-color: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }
          code { font-family: "SF Mono", "Fira Code", "Source Code Pro", Menlo, Consolas, Monaco, monospace; }
          .package-list a { display: block; padding: 8px 0; text-decoration: none; color: #007bff; }
          .package-list a:hover { text-decoration: underline; }
          .footer { margin-top: 40px; font-size: 0.9em; color: #777; }
        </style>
      </head><body>
      <div class="container">
        <h1>${REPO_NAME} Package Repository</h1>
        <p>This is an unofficial package repository for Arch Linux.</p>
        
        <h2>How to Use</h2>
        <p>Add the following to your <code>/etc/pacman.conf</code> file:</p>
        <pre><code>[${REPO_NAME}]
        SigLevel = Optional TrustAll
        Server = ${GITLAB_PAGES_URL}/x86_64</code></pre>
        <p>Then, run <code>sudo pacman -Syu</code> to synchronize the new repository.</p>
        
        <h2>Available Packages (x86_64)</h2>
        <div class="package-list">
      EOF
    - |
      if [ -z "$(find public/x86_64 -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)" ]; then
          echo "<p>No packages are available in this repository yet.</p>" >> public/index.html
      else
          for pkg in public/x86_64/*.pkg.tar.zst; do
              PKG_NAME=$(basename "$pkg")
              echo "<a href=\"x86_64/${PKG_NAME}\">${PKG_NAME}</a>" >> public/index.html
          done
      fi
    - |
      cat >> public/index.html << 'EOF'
        </div>
        <p class="footer">This repository is automatically generated by GitLab CI.</p>
      </div>
      </body></html>
      EOF
    - |
      cat > public/x86_64/index.html << 'EOF'
      <!DOCTYPE html>
      <html><head><title>Index of /x86_64</title></head><body>
      <h1>Index of /x86_64/</h1><hr><pre>
      <a href="../">../</a>
      EOF
    - for f in public/x86_64/*; do F_NAME=$(basename "$f"); echo "<a href=\"$F_NAME\">$F_NAME</a>" >> public/x86_64/index.html; done
    - |
      cat >> public/x86_64/index.html << 'EOF'
      </pre><hr></body></html>
      EOF

    - echo "Job finished. Repository and index page are ready."

  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'