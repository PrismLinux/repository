image: archlinux:latest

variables:
  REPO_NAME: "crystallinux"
  # Add more project IDs here, separated by spaces
  PACKAGE_PROJECT_IDS: "70724583" 
  # Set your GitLab Pages URL here for the instructions
  # Example: "https://your-username.gitlab.io/your-repo-project"
  GITLAB_PAGES_URL: "https://crystalnetwork-studio.gitlab.io/linux/CrystalLinux/repository/pkgbuilds/gitlab-profile/"

pages:
  stage: deploy

  before_script:
    - pacman -Syu --noconfirm
    # base-devel is crucial for 'repo-add'
    - pacman -S --noconfirm curl jq base-devel git

  script:
    # --- 1. Setup Repository Directory ---
    - mkdir -p public/x86_64
    - echo "Created repository directory structure at public/x86_64"

    # --- 2. Fetch and Download Packages from other Projects ---
    - |
      for project_id in $PACKAGE_PROJECT_IDS; do
        echo ">>> Processing project ID: $project_id"
        
        # Get the latest successful pipeline for the main branch
        PIPELINES_API_URL="https://gitlab.com/api/v4/projects/${project_id}/pipelines?status=success&ref=main&per_page=1"
        PIPELINE_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$PIPELINES_API_URL")
        
        if [ -z "$PIPELINE_RESPONSE" ] || [ "$PIPELINE_RESPONSE" = "[]" ]; then
          echo "WARNING: No successful 'main' branch pipelines found for project $project_id. Skipping."
          continue
        fi
        
        PIPELINE_ID=$(echo "$PIPELINE_RESPONSE" | jq -r '.[0].id')
        echo "Found latest successful pipeline ID: $PIPELINE_ID"
        
        # Get jobs from the pipeline that have artifacts
        JOBS_API_URL="https://gitlab.com/api/v4/projects/${project_id}/pipelines/${PIPELINE_ID}/jobs?scope[]=success"
        JOBS_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$JOBS_API_URL")
        JOB_WITH_ARTIFACTS=$(echo "$JOBS_RESPONSE" | jq -r '.[] | select(.artifacts_file != null) | .id' | head -n 1)
        
        if [ -z "$JOB_WITH_ARTIFACTS" ]; then
          echo "WARNING: No successful jobs with artifacts found in pipeline $PIPELINE_ID for project $project_id. Skipping."
          continue
        fi
        
        echo "Found job with artifacts: $JOB_WITH_ARTIFACTS"
        
        # Download the artifacts archive to a temporary directory
        TEMP_DIR=$(mktemp -d)
        ARTIFACTS_ZIP="$TEMP_DIR/artifacts.zip"
        
        echo "Downloading artifacts from job $JOB_WITH_ARTIFACTS..."
        curl --location --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
             --output "$ARTIFACTS_ZIP" \
             "https://gitlab.com/api/v4/projects/${project_id}/jobs/${JOB_WITH_ARTIFACTS}/artifacts"
        
        if [ -f "$ARTIFACTS_ZIP" ]; then
          echo "Extracting artifacts..."
          unzip -q "$ARTIFACTS_ZIP" -d "$TEMP_DIR"
          
          # Find and move the package files to our repository directory
          find "$TEMP_DIR" -name "*.pkg.tar.zst" -print0 | while IFS= read -r -d $'\0' pkg_file; do
            PACKAGE_NAME=$(basename "$pkg_file")
            echo "Found package: $PACKAGE_NAME. Moving to public/x86_64/"
            mv "$pkg_file" "public/x86_64/"
          done
        else
            echo "WARNING: Failed to download artifacts for job $JOB_WITH_ARTIFACTS."
        fi
        
        # Clean up the temporary directory
        rm -rf "$TEMP_DIR"
        echo "--- Finished processing project $project_id ---"
      done

    # --- 3. Create the Pacman Repository Database ---
    - cd public/x86_64
    - echo "Generating repository database..."
    # Remove old database files to ensure a clean build
    - |
      rm -f ${REPO_NAME}.db ${REPO_NAME}.db.tar.gz ${REPO_NAME}.files ${REPO_NAME}.files.tar.gz
      
      # Check if there are any packages to add
      if [ -z "$(find . -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)" ]; then
          echo "No packages found. Creating an empty repository."
          # Create empty db so pacman doesn't complain
          touch ${REPO_NAME}.db.tar.gz
          touch ${REPO_NAME}.files.tar.gz
      else
          echo "Adding packages to the ${REPO_NAME} repository..."
          # Add all .pkg.tar.zst files in the current directory to the repo database
          # The command creates/updates ${REPO_NAME}.db.tar.gz and ${REPO_NAME}.files.tar.gz
          repo-add ${REPO_NAME}.db.tar.gz *.pkg.tar.zst
          echo "Repository database created successfully."
      fi
    - cd ../..

    # --- 4. Generate a Human-Readable HTML Index Page ---
    - echo "Generating index.html..."
    - |
      cat > public/index.html << EOF
      <!DOCTYPE html>
      <html><head>
        <title>${REPO_NAME} Package Repository</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; margin: 40px; line-height: 1.6; color: #333; background-color: #fdfdfd; }
          .container { max-width: 800px; margin: 0 auto; }
          h1, h2 { color: #111; border-bottom: 1px solid #eee; padding-bottom: 10px; }
          pre { background-color: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }
          code { font-family: "SF Mono", "Fira Code", "Source Code Pro", Menlo, Consolas, Monaco, monospace; }
          .package-list a { display: block; padding: 8px 0; text-decoration: none; color: #007bff; }
          .package-list a:hover { text-decoration: underline; }
          .footer { margin-top: 40px; font-size: 0.9em; color: #777; }
        </style>
      </head><body>
      <div class="container">
        <h1>${REPO_NAME} Package Repository</h1>
        <p>This is an unofficial package repository for Arch Linux.</p>
        
        <h2>How to Use</h2>
        <p>Add the following to your <code>/etc/pacman.conf</code> file:</p>
        <pre><code>[${REPO_NAME}]
      SigLevel = Optional TrustAll
      Server = ${GITLAB_PAGES_URL}/x86_64</code></pre>
        <p>Then, run <code>sudo pacman -Syu</code> to synchronize the new repository.</p>
        
        <h2>Available Packages (x86_64)</h2>
        <div class="package-list">
      EOF

    # List the packages in the HTML file
    - |
      if [ -z "$(find public/x86_64 -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)" ]; then
          echo "<p>No packages are available in this repository yet.</p>" >> public/index.html
      else
          for pkg in public/x86_64/*.pkg.tar.zst; do
              PKG_NAME=$(basename "$pkg")
              echo "<a href=\"x86_64/${PKG_NAME}\">${PKG_NAME}</a>" >> public/index.html
          done
      fi

    - |
      cat >> public/index.html << 'EOF'
        </div>
        <p class="footer">This repository is automatically generated by GitLab CI.</p>
      </div>
      </body></html>
      EOF
    
    # Create a simple index in the x86_64 directory for browsing
    - |
      cat > public/x86_64/index.html << 'EOF'
      <!DOCTYPE html>
      <html><head><title>Index of /x86_64</title></head><body>
      <h1>Index of /x86_64/</h1><hr><pre>
      <a href="../">../</a>
      EOF
    - for f in public/x86_64/*; do F_NAME=$(basename "$f"); echo "<a href=\"$F_NAME\">$F_NAME</a>" >> public/x86_64/index.html; done
    - |
      cat >> public/x86_64/index.html << 'EOF'
      </pre><hr></body></html>
      EOF

    - echo "Job finished. Repository and index page are ready."

  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'