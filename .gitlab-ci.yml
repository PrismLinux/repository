# Copyright (C) 2025 CrystalNetwork Studio
#
# This file is part of the CrystalNetwork Studio, PrismLinux Repository.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

image: archlinux:latest

variables:
  REPO_NAME: "prismlinux"
  REPO_DIR: "public"
  GIT_STRATEGY: clone
  GIT_DEPTH: 0

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'push'
    - if: ($CI_PIPELINE_SOURCE == 'push' || $CI_PIPELINE_SOURCE == 'merge_request_event')
      changes:
        - .gitlab-ci.yml
        - packages_id.txt
        - remote_packages.txt
        - "*.go"
        - go.mod
        - go.sum

cache:
  key: "repo-cache-${CI_COMMIT_REF_SLUG}"
  paths:
    - "${REPO_DIR}/x86_64/"
  policy: pull-push

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm curl jq base-devel git go
    - git config --global user.name "GitLab CI/Package Manager"
    - git config --global user.email "CI@prismlinux.org"
    - git config --global init.defaultBranch main
    - |
      if [ -n "$GITLAB_API_TOKEN" ]; then
        echo "Configuring git with Personal Access Token..."
        git remote set-url origin "https://oauth2:${GITLAB_API_TOKEN}@${CI_SERVER_HOST#https://}/${CI_PROJECT_PATH}.git"
        echo "Git remote URL configured successfully"
      else
        echo "ERROR: GITLAB_API_TOKEN not found! Please add it to CI/CD variables."
        exit 1
      fi
    - go version

  script: |
    set -eo pipefail

    echo "Building package manager..."
    go build -o package-manager .

    echo "=== PRE-EXECUTION STATE ==="
    echo "Current directory contents:"
    ls -la
    echo "Public directory (if exists):"
    ls -la public/ || echo "Public directory doesn't exist yet"
    echo "=============================="

    echo "Running package manager with commit enabled..."
    if [ -n "$GITLAB_API_TOKEN" ]; then
      echo "Using Personal Access Token for GitLab operations..."
      ./package-manager --commit --verbose --gitlab-token="$GITLAB_API_TOKEN"
    else
      echo "ERROR: No GitLab token available!"
      exit 1
    fi

    echo "=== POST-EXECUTION STATE ==="
    echo "Git status:"
    git status || echo "Not in git repository"
    echo "Git log (last 3 commits on packages branch):"
    git log --oneline -3 packages || echo "No commits found on packages branch"
    echo "Public directory check:"
    if [ -d "public" ]; then
      echo "Public directory exists:"
      find public -type f | head -10 || echo "No files in public"
      echo "Total files in public: $(find public -type f | wc -l)"
    else
      echo "❌ Public directory missing!"
      exit 1
    fi
    echo "=============================="

    echo "Package management completed successfully."

  artifacts:
    paths:
      - public
    expire_in: 7 days

cleanup:
  stage: deploy
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm curl jq base-devel git go
    - git config --global user.name "GitLab CI/Cleanup"
    - git config --global user.email "ci-cleanup@prismlinux.org"
    - |
      if [ -n "$GITLAB_API_TOKEN" ]; then
        git remote set-url origin "https://oauth2:${GITLAB_API_TOKEN}@${CI_SERVER_HOST#https://}/${CI_PROJECT_PATH}.git"
      else
        echo "ERROR: GITLAB_API_TOKEN not found!"
        exit 1
      fi
    - go version

  script:
    - echo "Building package manager..."
    - go build -o package-manager .
    - echo "⚠️  CLEANUP MODE - This will remove all packages!"
    - echo "Running cleanup..."
    - ./package-manager --clean --commit --verbose --gitlab-token="$GITLAB_API_TOKEN"
    - echo "Cleanup completed!"

  artifacts:
    paths:
      - public
    expire_in: 1 day
