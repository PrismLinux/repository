image: archlinux:latest

variables:
  REPO_NAME: "crystallinux"
  PACKAGE_PROJECT_IDS: "70724583"

pages:
  stage: deploy

  before_script:
    - pacman -Syu --noconfirm
    - pacman -S --noconfirm curl jq base-devel

  script:
    - mkdir -p public/x86_64
    - echo "Created directory structure at public/x86_64"

    # --- Download Packages from Releases ---
    - |
      for project_id in $PACKAGE_PROJECT_IDS; do
        echo "Processing project ID: $project_id"
        API_URL="https://gitlab.com/api/v4/projects/${project_id}/releases/latest"

        # 1. First, get the API response into a variable
        API_RESPONSE=$(curl --silent --show-error --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$API_URL")

        # 2. Check if the response is not empty
        if [ -z "$API_RESPONSE" ]; then
          echo "WARNING: Received an empty response from API for project $project_id. Most likely no releases found. Skipping."
          continue
        fi

        # 3. Use a more robust query for jq
        #    (.assets.links // []) - if .assets.links is null, use an empty array []
        DOWNLOAD_URL=$(echo "$API_RESPONSE" | jq -r '(.assets.links // [])[] | select(.name | endswith(".pkg.tar.zst")) | .url' | head -n 1)

        if [ -z "$DOWNLOAD_URL" ]; then
          echo "WARNING: No '*.pkg.tar.zst' asset found in the latest release of project $project_id. Skipping."
          continue
        fi

        PACKAGE_FILENAME=$(basename "$DOWNLOAD_URL")
        echo "Found package: $PACKAGE_FILENAME. Downloading..."
        curl --silent --location --output "public/x86_64/$PACKAGE_FILENAME" "$DOWNLOAD_URL"
      done

    # --- Create/Update the Repository Database ---
    - cd public/x86_64

    # Check if there are packages to add to avoid repo-add errors
    - |
      if [ -z "$(find . -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)" ]; then
        echo "No packages found to add to the repository. Skipping database creation."
      else
        echo "Updating repository database '${REPO_NAME}.db.tar.gz'..."
        repo-add "${REPO_NAME}.db.tar.gz" *.pkg.tar.zst
        # Copy for compatibility
        cp "${REPO_NAME}.db.tar.gz" "${REPO_NAME}.db"
        cp "${REPO_NAME}.files.tar.gz" "${REPO_NAME}.files"
        echo "Repository database updated successfully."
      fi
    - cd ../..
    # --- Generate Simple HTML Index Pages ---
    - echo "Generating index.html files..."
    - |
      cat <<EOF > public/index.html
      <html><head><title>${REPO_NAME^} Packages</title></head><body>
      <h1>${REPO_NAME^} Packages</h1>
      <p>This is an Arch Linux package repository hosted on GitLab Pages.</p>
      <h2>Architectures:</h2><ul><li><a href="x86_64/index.html">x86_64</a></li></ul>
      </body></html>
      EOF
    - |
      cat <<EOF > public/x86_64/index.html
      <html><head><title>${REPO_NAME^} Packages (x86_64)</title></head><body>
      <h1>Packages for x86_64</h1><ul>
      EOF
    - | # Use this block to avoid errors if the folder is empty
      if [ -n "$(find public/x86_64 -maxdepth 1 -name '*.pkg.tar.zst' -print -quit)" ]; then
        for pkg in public/x86_64/*.pkg.tar.zst; do
          echo "      <li><a href=\"$(basename "$pkg")\">$(basename "$pkg")</a></li>" >> public/x86_64/index.html
        done
      else
        echo "      <li>No packages available yet.</li>" >> public/x86_64/index.html
      fi
    - |
      cat <<EOF >> public/x86_64/index.html
      </ul></body></html>
      EOF
    - echo "HTML generation complete."

  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
